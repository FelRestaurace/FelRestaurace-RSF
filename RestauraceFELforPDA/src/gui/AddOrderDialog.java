/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddMenuItem.java
 *
 * Created on 29.11.2009, 20:37:01
 */

package gui;

import hibernate.User;
import java.awt.event.ActionEvent;
import java.io.FileNotFoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import service.ServiceFacade;

/**
 *
 * @author Supervisor
 */
public class AddOrderDialog extends AbstractDialog {
    private User loggedUser;

    /** Creates new form AddMenuItem */
    public AddOrderDialog(javax.swing.JFrame parent, boolean modal, User loggedUser) throws FileNotFoundException, RemoteException, NotBoundException {
        super(parent, modal);
        this.loggedUser = loggedUser;
        initComponents();
        jLabel1.setText("Objednavka :");
        jLabel2.setText("Menu :");
        jLabel3.setText("Polozka :");
        jLabel4.setText("Pocet :");
        addButton.setText("Pridat");
        exitButton.setText("Zpet");
        refresh();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        accountBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        menuBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        menuItemBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        countSlider = new javax.swing.JSpinner();
        addButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(240, 320));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("jLabel1");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        accountBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(accountBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        jLabel2.setText("jLabel2");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        menuBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        menuBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuBoxItemStateChanged(evt);
            }
        });
        menuBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBoxActionPerformed(evt);
            }
        });
        add(menuBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 120, -1));

        jLabel3.setText("jLabel3");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        menuItemBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(menuItemBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 120, -1));

        jLabel4.setText("jLabel4");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));
        add(countSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 40, -1));

        addButton.setText("jButton1");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        exitButton.setText("jButton1");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            int amount = Integer.parseInt(countSlider.getValue().toString());
            for (int i = 0; i < amount; i++) {
            boolean isOK;
            Object[][] accounts = ServiceFacade.getInstance().getAccounts();
            int accountId = (Integer) accounts[accountBox.getSelectedIndex()][0];
            int menuId = ServiceFacade.getInstance().getMenuByName((String) menuBox.getSelectedItem()).getMenuId();
            Object[][] menus = ServiceFacade.getInstance().getMenuItemsByMenu(menuId);
            int menuItemId = (Integer) menus[menuItemBox.getSelectedIndex()][0];
            isOK = ServiceFacade.getInstance().createOrder(0, new Date(), accountId, loggedUser.getUserId());
                    if (!isOK) {
                        JOptionPane.showMessageDialog(this, "Objednávka nemohla být přijata.", "Objednávka", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
            Object [][] orders = ServiceFacade.getInstance().getOrdersByAccount(accountId);
            
            
                    isOK = ServiceFacade.getInstance().createOrderMenuItem(menuItemId, (Integer)orders[orders.length-1][0]);
                    if (!isOK) {
                        JOptionPane.showMessageDialog(this, "Objednávka nemohla být přijata.", "Objednávka", JOptionPane.INFORMATION_MESSAGE);
                        return;
                        }
            }
            refresh();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddOrderDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(AddOrderDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(AddOrderDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
        
    }//GEN-LAST:event_exitButtonActionPerformed

    private void menuBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_menuBoxItemStateChanged
    Object[][] menuItems=null;
    try {
          
          menuItems = ServiceFacade.getInstance().getMenuItemsByMenu(menuBox.getSelectedIndex()+1);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddOrderDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(AddOrderDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException rme) {
        }
        if (menuItems != null) {
            String[] items = new String[menuItems.length];
            for (int i = 0; i < menuItems.length; i++) {
                items[i] = menuItems[i][2].toString();
                
            }
            setComboBoxModel(items, menuItemBox);
        }
    }//GEN-LAST:event_menuBoxItemStateChanged




    private void menuBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBoxActionPerformed
        
    }//GEN-LAST:event_menuBoxActionPerformed

    protected void refresh() throws FileNotFoundException, NotBoundException, RemoteException {
        countSlider.setValue(1);
        String[] names = ServiceFacade.getInstance().getAccountNames();
        setComboBoxModel(names, accountBox);
        Object[][] menus = ServiceFacade.getInstance().getMenus();
        String[] menu = new String[menus.length];
        for (int i = 0; i < menus.length; i++) {
            menu[i] = menus[i][1].toString();
        }
        setComboBoxModel(menu, menuBox);
        Object[][] menuItems = ServiceFacade.getInstance().getMenuItemsByMenu(1);
        if (menuItems == null) return;
        String[] items = new String[menuItems.length];
        for (int i = 0; i < menuItems.length; i++) {
            items[i] = menuItems[i][2].toString();
        }
        setComboBoxModel(items, menuItemBox);
    }

    @Override
    protected int isValidInput() {
        return 0;
    }

    @Override
    protected void initTable() throws RemoteException, NotBoundException, FileNotFoundException {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox accountBox;
    private javax.swing.JButton addButton;
    private javax.swing.JSpinner countSlider;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox menuBox;
    private javax.swing.JComboBox menuItemBox;
    // End of variables declaration//GEN-END:variables

}
