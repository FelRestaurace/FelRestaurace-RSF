/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UzaverkaList.java
 *
 * Created on 4.11.2009, 8:19:26
 */
package gui;

import java.io.File;
import java.io.FileNotFoundException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import service.ConfigParser;
import service.ResultTableModel;
import service.ServiceFacade;

/**
 *
 * @author Lukas Camra
 */
/**
 * Konstruktor tridy UzaverkaList. Vytvari novy AbstractForm s prehledem vsech uzaverek
 * @author Lukas Camra
 */
public class UzaverkaList extends AbstractForm {

    private JTable table = null;
    private Object[][] kontroly = null;
    private JFrame parent = null;
    private StatusBar statusBar = null;

    /** Creates new form UzaverkaList */
    public UzaverkaList(JFrame parent, StatusBar bar) {
        this.parent = parent;
        this.statusBar = bar;
        initComponents();
        initTable();
        try {
            jTable1.setModel(new ResultTableModel(ResultTableModel.namesUzaverka, ServiceFacade.getInstance().getUzaverky()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent arg0) {
                int i = jTable1.getSelectedRow();
                if (i != -1) {
                    Integer id = Integer.valueOf(jTable1.getModel().getValueAt(i, 0).toString());
                    try {
//                       List<Kontrola> k = ServiceFacade.getInstance().getKontrolyFromUzaverka(id);
                        kontroly = ServiceFacade.getInstance().getUzaverkaKontroly(id);
                        refreshTable();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NotBoundException ex) {
                        Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (RemoteException ex) {
                        Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton2.setText("jButton2");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Statistika");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Vytisknout");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(237, 237, 237))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int[] radky = jTable1.getSelectedRows();
        int[] uzaverky = new int[radky.length];
        for (int i = 0; i < uzaverky.length; i++) {
            uzaverky[i] = Integer.parseInt(jTable1.getValueAt(radky[i], 0).toString());
        }
        if (radky.length == 0) {
            JOptionPane.showMessageDialog(this, "Nebyl vybrán ani jeden záznam!", "Statistika", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            List<Object[]> statistika = ServiceFacade.getInstance().getStatistikaFromUzaverky(uzaverky);
            new StatistikaDialog(parent, true, listToArray(statistika)).setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UzaverkaList.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Map<String, Object> params = new HashMap<String, Object>();
        try {
            String template = "uzaverka.jasper";
            ConfigParser config = new ConfigParser();
            params.put("title", "Uzávěrka");
            params.put("surovina", "Název suroviny");
            params.put("stareMn", "Puvodní množství");
            params.put("noveMn", "Nové množství");
            params.put("prodano", "Prodáno-váha");
            params.put("prodanoPokladnou", "Prodáno-cash");
            params.put("valid", "Platná");
            params.put("CenaDlePokladny", "Rozdíl");
            String printingFilePath = config.getTemplatesDir() + System.getProperty("file.separator") + template;
            File printFile = new File(printingFilePath);
            if (!printFile.exists()) {
                JOptionPane.showMessageDialog(null, "Šablona \"" + template + "\" nebyla v adresáři:\n\n " +
                        config.getTemplatesDir() + "\n\n nelezena. Pokud se šablony nachází v jiném adresáři, " +
                        "nastavte cestu k tomuto adresáři v nastavení.", "Tisková sestava nenalezena", JOptionPane.ERROR_MESSAGE);
                return;
            }
            PrintDialog printDialog = new PrintDialog(parent, true, params, printFile);
            printDialog.setTable(table);
            printDialog.setVisible(true);
            //Printer.compileReport(printFile, config.getTemplatesDir() + System.getProperty("file.separator") + "uzaverka.jasper");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Konfigurační soubor \"" + ConfigParser.getConfigFile() + "\" nebyl nalezen.", "Chyba", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Nelze navázat spojení se serverem.", "Chyba komunikace", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Metoda prevadi List na dvourozmerne pole
     * @param list seznam typu List ktery ma byt pretransformovan do dvourozmerneho poloe
     * @return vraci dvourozmerne pole
     */
    private Object[][] listToArray(List<Object[]> list) {
        Object[][] result = new Object[list.size()][];
        int i = 0;
        for (Object[] a : list) {
            result[i] = a;
            i++;
        }
        return result;
    }

    /**
     * Aktualizuje cele okno
     * 
     * @throws FileNotFoundException
     * @throws NotBoundException
     * @throws RemoteException
     */
    @Override
    protected void refresh() throws FileNotFoundException, NotBoundException, RemoteException {
        refreshTable();

    }

    /**
     * Metoda kontroluje zda je vstup validni
     * @return vraci cele cislo reprezentujici validnost vstupu
     */
    @Override
    protected int isValidInput() {
        return 1;
    }

    /**
     * metoda inicializuje tabulku se seznam kontrol vybrane uzaverky
     */
    @Override
    protected void initTable() {
        table = new JTable();
        table.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        table.setRowSelectionAllowed(true);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * Metoda aktualizuje tabulku se seznam kontrol vybrane uzaverky
     * @throws FileNotFoundException
     * @throws NotBoundException
     * @throws RemoteException
     */
    @Override
    protected void refreshTable() throws FileNotFoundException, NotBoundException, RemoteException {
        ResultTableModel rtm = new ResultTableModel();
        rtm.setColumnData(ResultTableModel.namesUzaverkaKontroly);
        rtm.setTableData(kontroly);
        table.setModel(rtm);
        table.setVisible(true);
    }

    /**
     * getter pro tabulku se seznamem kontrol
     * @return vraci tabulku se seznamem kontrol
     */
    public JTable getTable() {
        return table;
    }

    /**
     * metoda cisti vsechny input boxy
     */
    @Override
    protected void clearFields() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
